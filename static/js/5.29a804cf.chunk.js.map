{"version":3,"sources":["components/Crew/Crew.js","components/CastAndCrew/CastAndCrew.js","components/Movie/Movie.js"],"names":["React","memo","crew","handleClick","Fragment","className","map","crewDetail","index","Row","key","Col","onClick","id","name","job","withRouter","cast","history","navigateToDetail","push","length","Container","fluid","xs","person","md","sm","Movie","this","props","dispatch","movieId","match","params","selectMovieId","peekMovieDetails","isFetching","isEmpty","movieDetail","generalDetails","castAndCrewDetails","releaseDate","release_date","Date","getFullYear","toString","background","backdrop_path","title","original_title","tagline","runtime","overview","Component","connect","state","selectedMovieId","movieDetailsReducer"],"mappings":"4RAsCeA,G,MAAAA,IAAMC,MA7BR,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACpB,OACE,kBAAC,IAAMC,SAAP,KACE,wBAAIC,UAAU,cACZ,kBAAC,IAAD,MADF,SAGA,6BACCH,EAAKI,KAAI,SAACC,EAAYC,GAAb,OACR,kBAACC,EAAA,EAAD,CAAKC,IAAKF,GACR,kBAACG,EAAA,EAAD,KACE,wBACEN,UAAU,YACVO,QAAS,kBAAMT,EAAYI,EAAWM,MAErCN,EAAWO,MAEd,uBAAGT,UAAU,YAAYE,EAAWQ,eCiCjCf,G,OAAAA,IAAMC,KAAKe,aA7CN,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMf,EAAoB,EAApBA,KAAMgB,EAAc,EAAdA,QAC3BC,EAAmB,SAACN,GACxBK,EAAQE,KAAK,WAAaP,IAG5B,OAAKI,EAAKI,OAKR,kBAAC,IAAMjB,SAAP,KACE,kBAACkB,EAAA,EAAD,CAAWC,OAAK,EAAClB,UAAU,iBACzB,kBAACI,EAAA,EAAD,CAAKJ,UAAU,QACb,kBAACM,EAAA,EAAD,CAAKa,GAAI,GACP,wBAAInB,UAAU,cACZ,kBAAC,IAAD,MADF,SAGA,kBAACI,EAAA,EAAD,KACGQ,EAAKX,KAAI,SAACmB,EAAQjB,GAAT,OACR,kBAACG,EAAA,EAAD,CACED,IAAKF,EACLgB,GAAI,GACJE,GAAI,EACJC,GAAI,EACJf,QAAS,kBAAMO,EAAiBM,EAAOZ,MAEvC,kBAAC,IAAeY,SAKxB,kBAACd,EAAA,EAAD,KACE,kBAAC,EAAD,CAAMT,KAAMA,EAAMC,YAAa,SAACU,GAAD,OAAQM,EAAiBN,UA1BzD,kBAAC,IAAD,WCPLe,E,kLAYiB,IAAD,EAMdC,KAAKC,MAJPC,EAFgB,EAEhBA,SAEYC,EAJI,EAGhBC,MACEC,OAAUF,QAIVA,IACFD,EAASI,YAAcH,IACvBD,EAASK,YAAiBJ,O,+BAIpB,IAAD,EACsCH,KAAKC,MAA1CO,EADD,EACCA,WAAYC,EADb,EACaA,QADb,IACsBC,aACiC,GAAtDC,EAFD,EAECA,eAAgBC,EAFjB,EAEiBA,mBAExB,GAAIJ,IAAeG,EACjB,OAAO,kBAAC,IAAD,MAGT,GAAIF,EACF,OAAO,kBAAC,IAAD,MAGT,IAAMI,EACHF,EAAeG,cACd,IAAIC,KAAKJ,EAAeG,cAAcE,cAAcC,YACtD,KAEF,OACE,kBAAC,IAAM1C,SAAP,KACE,kBAAC,IAAD,CACE2C,WAAYP,EAAeQ,cAC3BC,MAAOT,EAAeU,eACtBC,QAASX,EAAeW,QACxBC,QAASZ,EAAeY,QACxBC,SAAUb,EAAea,SACzBX,YAAaA,IAEf,kBAAC,EAAgBD,Q,GArDLzC,IAAMsD,WA2EXtC,sBAAWuC,aAhBF,SAACC,GAAW,IAC1BC,EAAyCD,EAAzCC,gBAAiBC,EAAwBF,EAAxBE,oBADQ,EAGDA,EAAoBD,IAAoB,CACtEpB,YAAY,EACZC,SAAS,GAFHD,EAHyB,EAGzBA,WAAYC,EAHa,EAGbA,QAMpB,MAAO,CACLC,YAHkBmB,EAAoBD,IAAoB,GAI1DpB,aACAC,aAIsBiB,CAAyB3B,K","file":"static/js/5.29a804cf.chunk.js","sourcesContent":["// External Dependencies\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { RiMovie2Fill } from \"react-icons/ri\";\n\n// Internal Dependencies\nimport \"./Crew.scss\";\n\nconst Crew = ({ crew, handleClick }) => {\n  return (\n    <React.Fragment>\n      <h4 className=\"crew-title\">\n        <RiMovie2Fill /> Crew\n      </h4>\n      <hr />\n      {crew.map((crewDetail, index) => (\n        <Row key={index}>\n          <Col>\n            <h3\n              className=\"crew-name\"\n              onClick={() => handleClick(crewDetail.id)}\n            >\n              {crewDetail.name}\n            </h3>\n            <p className=\"crew-job\">{crewDetail.job}</p>\n          </Col>\n        </Row>\n      ))}\n    </React.Fragment>\n  );\n};\n\nCrew.propTypes = {\n  crew: PropTypes.array.isRequired,\n  handleClick: PropTypes.func,\n};\n\nexport default React.memo(Crew);\n","// External Dependencies\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { TiGroup } from \"react-icons/ti\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\n// Internal Dependencies\nimport { PersonCard, DataNotFound } from \"components/Shared\";\nimport Crew from \"components/Crew/Crew\";\n\nimport \"./CastAndCrew.scss\";\n\nconst CastAndCrew = ({ cast, crew, history }) => {\n  const navigateToDetail = (id) => {\n    history.push(\"/person/\" + id);\n  };\n\n  if (!cast.length) {\n    return <DataNotFound />;\n  }\n\n  return (\n    <React.Fragment>\n      <Container fluid className=\"cast-and-crew\">\n        <Row className=\"mt-3\">\n          <Col xs={9}>\n            <h4 className=\"cast-title\">\n              <TiGroup /> Cast\n            </h4>\n            <Row>\n              {cast.map((person, index) => (\n                <Col\n                  key={index}\n                  xs={12}\n                  md={2}\n                  sm={4}\n                  onClick={() => navigateToDetail(person.id)}\n                >\n                  <PersonCard {...person} />\n                </Col>\n              ))}\n            </Row>\n          </Col>\n          <Col>\n            <Crew crew={crew} handleClick={(id) => navigateToDetail(id)} />\n          </Col>\n        </Row>\n      </Container>\n    </React.Fragment>\n  );\n};\n\nCastAndCrew.propTypes = {\n  cast: PropTypes.array.isRequired,\n  crew: PropTypes.array.isRequired,\n};\n\nexport default React.memo(withRouter(CastAndCrew));\n","// External Dependencies\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\n\n// Internal Dependencies\nimport { peekMovieDetails } from \"store/actions\";\nimport { selectMovieId } from \"store/dispatchers\";\nimport { Banner, DataNotFound, Loader } from \"components/Shared\";\nimport CastAndCrew from \"components/CastAndCrew/CastAndCrew\";\n\nclass Movie extends React.Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        movieId: PropTypes.string.isRequired,\n      }),\n    }),\n    movieDetail: PropTypes.object.isRequired,\n    isFetching: PropTypes.bool.isRequired,\n    isEmpty: PropTypes.bool.isRequired,\n  };\n\n  componentDidMount() {\n    const {\n      dispatch,\n      match: {\n        params: { movieId },\n      },\n    } = this.props;\n\n    if (movieId) {\n      dispatch(selectMovieId(movieId));\n      dispatch(peekMovieDetails(movieId));\n    }\n  }\n\n  render() {\n    const { isFetching, isEmpty, movieDetail } = this.props;\n    const { generalDetails, castAndCrewDetails } = movieDetail || {};\n\n    if (isFetching || !generalDetails) {\n      return <Loader />;\n    }\n\n    if (isEmpty) {\n      return <DataNotFound />;\n    }\n\n    const releaseDate =\n      (generalDetails.release_date &&\n        new Date(generalDetails.release_date).getFullYear().toString()) ||\n      \"NA\";\n\n    return (\n      <React.Fragment>\n        <Banner\n          background={generalDetails.backdrop_path}\n          title={generalDetails.original_title}\n          tagline={generalDetails.tagline}\n          runtime={generalDetails.runtime}\n          overview={generalDetails.overview}\n          releaseDate={releaseDate}\n        />\n        <CastAndCrew {...castAndCrewDetails} />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const { selectedMovieId, movieDetailsReducer } = state;\n\n  const { isFetching, isEmpty } = movieDetailsReducer[selectedMovieId] || {\n    isFetching: true,\n    isEmpty: false,\n  };\n  const movieDetail = movieDetailsReducer[selectedMovieId] || {};\n\n  return {\n    movieDetail,\n    isFetching,\n    isEmpty,\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(Movie));\n"],"sourceRoot":""}